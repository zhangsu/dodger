#define GLM_FORCE_RADIANS
#include <stdexcept>
#include <string>
#include <GL/glew.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include "game.hh"
#include "glerror.hh"
#include "renderer.hh"

using std::runtime_error;
using std::string;
using glm::mat4;
using glm::vec3;

// Public methods.

Renderer::Renderer(int width, int height, const Game& game) : game_(game) {
    initGlew();
    resize(width, height);

    glEnable(GL_MULTISAMPLE);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    checkGlError();

    glGenVertexArrays(1, &vao_);
    checkGlError();
    glBindVertexArray(vao_);
    checkGlError();

    GLfloat vertices[] = {
       -1.0f, -1.0f, 0.0f,
       1.0f, -1.0f, 0.0f,
       0.0f,  1.0f, 0.0f,
    };

    glGenBuffers(1, &vbo_);
    checkGlError();
    glBindBuffer(GL_ARRAY_BUFFER, vbo_);
    checkGlError();
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    checkGlError();

    program_.loadVertexShader("src/shader.vert");
    program_.loadFragmentShader("src/shader.frag");
    program_.link();
    program_.use();

    program_.enableVertexAttribArray("vert");
    program_.vertexAttribPointer("vert", 3, GL_FLOAT, GL_FALSE, 0, nullptr);

}

void Renderer::render() {
    glClearColor(0, 0, 0, 1);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    view_ = glm::lookAt(game_.pos(), game_.reference_pos(), vec3(0, 1, 0));
    program_.uniformMat4("mvp", glm::value_ptr(mvp()));
    glDrawArrays(GL_TRIANGLES, 0, 3);
}

void Renderer::resize(int width, int height) {
    if (height == 0)
        height = 1;

    float fov = glm::radians(60.0f);
    float aspect_ratio = (float) width / height;
    perspective_ = glm::perspective(fov, aspect_ratio, 0.001f, 100.0f);

    glViewport(0, 0, width, height);
    checkGlError();
}

// Private methods.

void Renderer::initGlew() const {
    glewExperimental = true;
    GLenum err = glewInit();
    // Ignore any OpenGL error generated by GLEW.
    glGetError();
    if (err != GLEW_OK) {
        string message = "GLEW: ";
        throw runtime_error(message + (const char*) glewGetErrorString(err));
    }
}

mat4 Renderer::mvp() const {
    return perspective_ * view_ * model_;
}
